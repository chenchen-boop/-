//E調

#define NOTE_G2 248
#define NOTE_A2 278
#define NOTE_B2 312


#define NOTE_C3 330
#define NOTE_D3 350
#define NOTE_E3 393
#define NOTE_F3 441
#define NOTE_G3 495
#define NOTE_A3 556
#define NOTE_B3 624
#define NOTE_C4 661
//幾個音(要改)
#define NUM     148

int latchPin = 8;
int clockPin = 12;
int dataPin = 11;
int THISNODE=0;
int first=1;
int melody[] = 
{
  0,0,0,NOTE_A2,NOTE_A2,NOTE_B2,
 NOTE_B2, NOTE_C3 , NOTE_C3 ,NOTE_C3, NOTE_C3, NOTE_C3 ,NOTE_C3,NOTE_B2,
 NOTE_B2,NOTE_C3,NOTE_C3,NOTE_C3,NOTE_C3 ,NOTE_A2 , NOTE_A2  ,NOTE_C3,
  NOTE_C3 ,NOTE_C3, NOTE_C3, NOTE_C3, NOTE_G2, NOTE_G2, NOTE_C3,
 NOTE_C3,NOTE_B2,NOTE_B2,NOTE_B2,NOTE_B2,NOTE_B2,NOTE_B2,NOTE_A2,
  
   
  
  0, NOTE_E3 , NOTE_E3 , NOTE_D3 , NOTE_D3 , NOTE_C3 , NOTE_C3  ,NOTE_B2 ,
  NOTE_B2,  NOTE_C3  ,NOTE_C3 ,0, NOTE_G2 ,NOTE_G2 , NOTE_G2 ,
  NOTE_E3 , NOTE_G2 , NOTE_G2 , NOTE_G2 ,
  NOTE_D3,0,
  
  0, NOTE_E3 , NOTE_E3 , NOTE_D3 , NOTE_D3 , NOTE_C3 , NOTE_C3  ,NOTE_B2 ,
  NOTE_B2,  NOTE_C3  ,NOTE_C3 ,NOTE_B2, NOTE_A2 ,NOTE_G2 , NOTE_G2 , NOTE_G2 ,
  NOTE_E3 , NOTE_G2 , NOTE_G2 , NOTE_G2 ,
  NOTE_D3,0,
  
 
  
   NOTE_A2, NOTE_B2 ,NOTE_A2, NOTE_B2 ,NOTE_C3, NOTE_B2 ,NOTE_C3, NOTE_D3 ,NOTE_E3 ,NOTE_F3 ,NOTE_E3 ,0,NOTE_A2,
  NOTE_A2, NOTE_B2 ,NOTE_A2, NOTE_B2 ,NOTE_C3, NOTE_B2 ,NOTE_C3, NOTE_D3 ,NOTE_E3 ,NOTE_F3 ,NOTE_E3 ,0,NOTE_C3,NOTE_D3,
 NOTE_E3, NOTE_F3 ,NOTE_E3, NOTE_C3 ,NOTE_D3, NOTE_E3 ,NOTE_F3, NOTE_E3 ,NOTE_D3 ,NOTE_C3 ,
  NOTE_D3,0,0,
  
  NOTE_C3,NOTE_C3,NOTE_C3,NOTE_D3,NOTE_D3,NOTE_E3,NOTE_E3,NOTE_G3,
  NOTE_G3,NOTE_A3,NOTE_A3,
  NOTE_C3,NOTE_D3,NOTE_D3,NOTE_E3,NOTE_E3,NOTE_G3,NOTE_G3,NOTE_C3,
  NOTE_E3,NOTE_D3,NOTE_D3,
  NOTE_E3,NOTE_E3,NOTE_E3,NOTE_E3,NOTE_E3,NOTE_E3,NOTE_E3,NOTE_E3,
  NOTE_E3,NOTE_D3,NOTE_D3,
  NOTE_C3,NOTE_C3,NOTE_C3,NOTE_D3,NOTE_D3,NOTE_E3,NOTE_E3,NOTE_G3,
  NOTE_G3,NOTE_A3,NOTE_A3,
  NOTE_C3,NOTE_D3,NOTE_D3,NOTE_E3,NOTE_E3,NOTE_G3,NOTE_G3,NOTE_C3,
  NOTE_E3,NOTE_D3,NOTE_D3, NOTE_F3,NOTE_E3,NOTE_D3,NOTE_C3,

  
 };
//音符長度(要改)
int noteDurations[] =
{
  8,8,8,4,4,4,
  4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,
  4,4,2,4,4,4,4,
  4,4,4,4,4,4,4,4,
  
  
  4,4,4,4,4,4,4,4,
  4,4,2,4,4,4,2,
  1,4,4,2,
  1,1,
  
  4,4,4,4,4,4,4,4,
  4,4,6,6,2,4,4,2,
  1,4,4,2,
  1,1,
  
  
  
  
  
  6,6,6,6,6,6,6,6,6,6,4,3,6,
  6,6,6,6,6,6,6,6,6,6,4,4,6,6,
  6,6,4,6,6,6,6,4,4,4,
  1,2,2,
  
  4,4,4,4,4,4,3,6,
  4,4,1,
  4,4,4,4,4,4,3,6,
  4,4,1,
  4,4,4,4,4,4,3,6,
  4,4,1,
  4,4,4,4,4,4,3,6,
  4,4,2,4,4,4,4,
  
    

};
int thisNote = -1,noteDuration = 0, checktochangerow=0;
long previousTime = 0,
     presentTime = 0,
     pauseBetweenNotes = 0;


byte colDataMatrix[8] = {
   B11111110,
   B11111101,
   B11111011,
   B11110111,
   B11101111,
   B11011111,
   B10111111,
   B01111111
}; //掃描
  

byte rowDataMatrix[8] = {
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
   B00000000,
}; //圖案
byte FINALDataMatrix[8] = {
   B11111111,
   B11111111,
   B11111111,
   B11111111,
   B11111111,
   B11111111,
   B11111111,
   B11111111
}; //圖案




void setup() {
  pinMode(latchPin,OUTPUT);
  pinMode(clockPin,OUTPUT);
  pinMode(dataPin,OUTPUT);
  pinMode(9,OUTPUT);
  pinMode(2,INPUT_PULLUP);
 
}
int firstrowset (int x){
  
  switch(x){
   	 case(  NOTE_C3) :
    rowDataMatrix[0]=B00000001;
    		  break;
  
     case ( NOTE_D3) :
    rowDataMatrix[0]=B00000010;
              break;
     case ( NOTE_E3) :
    rowDataMatrix[0]=B00000100;
              break;

     case  ( NOTE_F3) :
    rowDataMatrix[0]=B00001000;
              break;
     case  ( NOTE_G3 ):
    rowDataMatrix[0]=B00010000;
              break;

     case  ( NOTE_A3 ):
    rowDataMatrix[0]=B00100000;
              break;
     case  ( NOTE_B3) :
    rowDataMatrix[0]=B01000000;
              break;

     case  ( NOTE_C4 ):
    rowDataMatrix[0]=B10000000;
              break;
    
     case  ( NOTE_G2 ):
    rowDataMatrix[0]=B00010000;
              break;

     case  ( NOTE_A2 ):
    rowDataMatrix[0]=B00100000;
              break;
     case  ( NOTE_B2) :
    rowDataMatrix[0]=B01000000;
              break;
  
    default :{ return(0);}
    
  }
  
  
  return (1);
    
}


int checkToPlay(){

  presentTime = millis();
  if(presentTime-previousTime>=pauseBetweenNotes)
  {//要換音
      thisNote+=1;
    if(thisNote==NUM){ 
      //到最後一個音了
     	thisNote=-1;
      for(int i=0;i<8;i++){
      	rowDataMatrix[i]=FINALDataMatrix[i];
      }
        pauseBetweenNotes=1000;
      	previousTime=millis();
        return (0);//(顯示不變)
      }
  	else
    {
      noteDuration=800/noteDurations[thisNote];//調整基本音符
      
      if(melody[thisNote]!=0){
          tone(9,melody[thisNote],noteDuration);
          THISNODE=melody[thisNote];//紀錄當前音符頻率
          pauseBetweenNotes=noteDuration*1.3;//音符間隔
          previousTime = millis();
          return(1);//有音符(顯示變)
         }
      else{
       	 delay(noteDuration);
      	 pauseBetweenNotes=noteDuration*1.3;//音符間隔
      	 previousTime = millis();
         return(0);//空音	(顯示不變)
         }
    
  	}
  }  
  return (0);
   
}




 byte previous_buttonState=1,present_buttonState=1,patternNumber=0;

void loop() {
  

    for(int P = 0; P < 8 ; P++){
    	digitalWrite(latchPin,LOW);
    	shiftOut(dataPin, clockPin, MSBFIRST, colDataMatrix[P]);//掃描顯示
    	shiftOut(dataPin, clockPin, MSBFIRST, rowDataMatrix[P]);
    	digitalWrite(latchPin,HIGH);
        checktochangerow=checkToPlay();
      
        delay(5); 
      
        if(checktochangerow){
    
    		for(int i=6;i>=0;i--){
    
   				rowDataMatrix[i+1]=rowDataMatrix[i];   //傳遞音符
      
	 		 }
 			first=  firstrowset(THISNODE);//設定最新的音符至第一列(回傳直1:有音符,回傳直0:空音)
       
         }
      
   
     
    }
  
  
  

}
